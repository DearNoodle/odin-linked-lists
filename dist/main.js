(()=>{"use strict";const e=class{constructor(e){this.value=e,this.next=null}},t=new class{constructor(){this.head=null}append(t){const r=new e(t);if(this.head){let e=this.head;for(;e.next;)e=e.next;e.next=r}else this.head=r}prepend(t){const r=new e(t);this.head?(r.next=this.head,this.head=r):this.head=r}size(){if(!this.head)return 0;let e=this.head,t=1;for(;e.next;)t+=1,e=e.next;return t}getHead(){if(!this.head)throw new Error("No head for empty list.");return this.head}getTail(){if(!this.head)throw new Error("No tail for empty list.");let e=this.head;for(;e.next;)e=e.next;return e}at(e){if(!Number.isInteger(e))throw new Error("Invalid parameter type. Integer required.");if(e<0)throw new Error("List index out of range");if(!this.head)throw new Error("Cannot access index of empty list");let t=this.head;for(let r=0;r<e;r++){if(!t.next)throw new Error("List index out of range");t=t.next}return t}pop(){if(!this.head)throw new Error("Cannot pop in empty list");let e=this.head;for(;e.next.next;)e=e.next;e.next=null}contains(e){if(!this.head)throw new Error("Empty list");let t=this.head;if(t===e)return!0;for(;t.next;)if(t=t.next,t.value===e)return!0;return!1}find(e){if(!this.head)throw new Error("Cannot find value in empty list");let t=0,r=this.head;if(r.value===e)return t;for(;r.next;)if(r=r.next,t+=1,r.value===e)return t;return null}toString(){if(!this.head)throw new Error("Empty list");let e="",t=this.head;for(e+=`( ${t.value} )`;t.next;)t=t.next,e+=` -> ( ${t.value} )`;return e+=" -> null",e}insertAt(t,r){const n=new e(t);if(!this.head&&0!==r)throw new Error("List index out of range");let i=this.head,h=null;if(0===r)return n.next=this.head,void(this.head=n);for(let e=0;e<=r;e++){if(e===r)return n.next=i,void(h.next=n);if(!i.next&&e+1!==r)throw new Error("List index out of range");h=i,i=i.next}}removeAt(e){if(!this.head)throw new Error("Cannot remove node from empty list");let t=this.head,r=null;if(0!==e){for(let n=0;n<e;n++)if(r=t,t=t.next,!t)throw new Error("List index out of range");r.next=t.next}else this.head=t.next}};t.append(1),t.append(2),t.append(4),t.append(5),console.log(t.toString())})();